:PROPERTIES:
:ID:       c54a7f53-0d05-43e6-9edb-568989392ed8
:END:
#+title: Laravel-Controllers
* Controllers As Alternative To Defining Routes
Rather than defining all the functionality of our system in the routes file we will define grouped functionality via controller files, we can make all functionality in the controller accessible via http request by defining our controller as a resource in the routes file. Abstracting required functionality into classes allows us to follow the MVC framework in a true fashion and for any larger applications this will make the project way more manageable in the future.

* Controller Middleware
Middleware for a controller can be defined in the constructor of a controller class like so

#+begin_src php
  public function __construct()
    {
        $this->middleware('auth');
        $this->middleware('log')->only('index');
        $this->middleware('subscribed')->except('store');
    }
#+end_src

This is cleaner than defining the middleware for the resource in the routes file

* Resource Controllers
We can create a controller using the following command
#+begin_src bash
  php artisan make:controller PhotoController --resource
#+end_src
The resource flag indicates that we wish for the typical CRUD commands to be inserted into the class.

** Route Model Binding
We can also pass the model flag when creating the controller, laravel will inject the model into the controller
#+begin_src php
  php artisan make:controller PhotoController --resource --model=Photo
#+end_src

** Api Controller
We can also pass the api flag if we are creating a pure api controller so we don't included not needed functionality
#+begin_src php
  php artisan make:controller PhotoController --resource --model=Photo --api
#+end_src



:PROPERTIES:
:ID:       23cbefc1-aa58-48a1-ad3b-104862ec1fcc
:END:
#+title: tripleR

* Database structure

Currently the types of Order inherit from the Order table and the non common fields are stored in the type specific tables. This may cause issues as the users have said that it is quite common for an order to be of multiple types, for example an order can be a resend intially and then it is refunded. With the current structure we would be able to store two records, one for the resend order and then the refund for the same order_id, which both would link to the main order in the Order table via foreign key. However there are issues with this as the user may want to record unique reasons for each entry into the type of order, which would not be possible. The solution would be separate out the fields that will not be constant across the child types of Order, for example reason, date, reason_notes, notes, as these fields will need to change if we had an order that ended up being two types.

* (Foreign Key Unique Primary Key) vs OneToOne Field

Further research the advantages of using each option, them seem to operate very similar other than some small edge cases, current foreign key setup works for me.
Seems that it would be consistnet to use a OneToOne relationship as an order_id in the orders table can only have one of each type of order.

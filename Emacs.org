#+title: Emacs Config
#+author: Ryan Denby
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Intro

My configuration file for emacs, this file when saved will automatically generate the init.el file

Below we will define some default values to be used throughout the config

#+begin_src emacs-lisp

  ;; native comp
  ;; run (byte-recompile-directory package-user-dir nil 'force) on fresh install
  (setq comp-deferred-compilation t)
  (setq comp-speed 3)
  (setq comp-async-report-warnings-errors nil)
  (setq warning-minimum-level :error)

  ;; Set default font size values
  (defvar efs/default-font-size 150)
  (defvar efs/default-variable-font-size 150)

  ;; Set default transparency values
  (defvar efs/frame-transparency '(100 . 100))

#+end_src

* Startup Performance

Tracks performace of config on startup, useful to see if it is taking too long for the config to load, as it could indicate that there is issues with a package etc

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
  (server-force-delete)
  (server-start)

#+end_src

* Package System Setup

Define package archives where we will pull up the packages for the config

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms (incase I ever use emacs on windows)
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

** Straight.el

Package management

#+begin_src emacs-lisp
  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
          'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Always use straight to install on systems other than Linux
  (setq straight-use-package-by-default (not (eq system-type 'gnu/linux)))

  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)

  ;; Load the helper package for commands like `straight-x-clean-unused-repos'
  (require 'straight-x)

#+end_src

** Automatic Package Updates

Checks all packages for updates when emacs is started, good to keep packages up to date to avoid any issues with speed etc

Force emacs to check for updates while open by using M-x auto-package-update-now

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* Keep Folders Clean

Keeps folders where you are using emacs clean

#+begin_src emacs-lisp

  (use-package no-littering)

  ;; Disable auto saving and backups and symbolic link files
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq create-lockfiles nil)

#+end_src

* Basic UI Configuration

** Dashboard

Simple main menu, with a list of recent files and projects

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
      (dashboard-setup-startup-hook)
      (setq dashboard-startup-banner 'official)
      (setq dashboard-items '((recents  . 5)
                              (projects . 5)))
      (setq dashboard-banner-logo-title ""))
#+end_src

** General emacs ui config

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        

  (menu-bar-mode -1)            ; Disable the menu bar

  (column-number-mode)
  (global-display-line-numbers-mode t) ; Line numbers

  ;; y or n instead of yes or no
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha efs/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,efs/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Better scrolling
  (setq scroll-conservatively 100)

#+end_src

** Switch Panes

Logical way of navigating between panes in a buffer, no spamming C-x o to cycle panes

#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
      (setq switch-window-input-style 'minibuffer)
      (setq switch-window-increase 4)
      (setq switch-window-threshold 2)
      (setq switch-window-shortcut-style 'qwerty)
      (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
    :bind
      ([remap other-window] . switch-window))
#+end_src

** Follow splits

Cursor will jump to a pane when you make a new split

#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

** Font Configuration

Config for font, using font variable defined at start of config

#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "Source Code Pro" :height efs/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Source Code Pro" :height efs/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Source Code Pro" :height efs/default-variable-font-size :weight 'regular)

#+end_src

* UI Configuration
** Color Theme

Theme, stuff

#+begin_src emacs-lisp

  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")

  ;; (use-package ample-theme
  ;;   :init
  ;;   (load-theme 'ample t))

  (load-theme 'desert t)

  (set-foreground-color "#c5c8c6")
  (set-background-color "#1d1f21")


  ;; For the default theme
  (custom-set-faces
   '(company-preview
     ((t (:background "#1d1f21" :foreground "white" :underline t))))
   '(company-preview-common
     ((t (:inherit company-preview))))
   '(company-tooltip
     ((t (:background "#1d1f21" :foreground "white"))))
   '(company-tooltip-selection
     ((t (:background "steelblue" :foreground "white"))))
   )

#+end_src

** Better Modeline

Modeline from doom as it is simple and clean, as the default one is pretty useless 

#+begin_src emacs-lisp

(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

#+end_src

** Diminish

Hide minor modes

#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

** Which Key

Will provide possible key combinations for you after a prefix, useful if you can remember the full command

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

#+end_src

** Ivy and Counsel and Avy

Ivy is a completion framework, can be used for everything, mainly use it for files etc

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
             :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)
             :map ivy-switch-buffer-map
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))

    (use-package ivy-rich
      :after ivy
      :init
      (ivy-rich-mode 1))

    (use-package counsel
      :bind (("C-M-j" . 'counsel-switch-buffer)
             :map minibuffer-local-map
             ("C-r" . 'counsel-minibuffer-history))
      :custom
      (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
      :config
      (counsel-mode 1))

  (use-package avy
    :ensure t
    :bind
      ("M-s" . avy-goto-char)
      ("M-m" . avy-goto-word-0))

#+end_src

*** Improved Candidate Sorting with prescient.el

prescient.el provides some helpful behavior for sorting Ivy completion candidates based on how recently or frequently you select them.  This can be especially helpful when using =M-x= to run commands that you don't have bound to a key but still need to access occasionally.

#+begin_src emacs-lisp

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    ;(prescient-persist-mode 1)
    (ivy-prescient-mode 1))

#+end_src

** Workspaces

#+begin_src emacs-lisp

  (use-package perspective
    :demand t
    :bind (("C-x x s" . persp-switch)
           ("C-x x n" . persp-next)
           ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-initial-frame-name "Main")
    :config
    (unless (equal persp-mode t)
      (persp-mode)))

#+end_src

** Helpful Help Commands

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Org Mode
** Better Font Faces

#+begin_src emacs-lisp

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

#+end_src

** Basic Config

#+begin_src emacs-lisp

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/.emacs.d/OrgFiles/Tasks.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
        ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@errand" . ?E)
         ("@home" . ?H)
         ("@work" . ?W)
         ("agenda" . ?a)
         ("planning" . ?p)
         ("publish" . ?P)
         ("batch" . ?b)
         ("note" . ?n)
         ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work-email")

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
               (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
               (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
               (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
               (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Meeting" entry
             (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

        ("m" "Metrics Capture")
        ("mw" "Weight" table-line (file+headline "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org" "Weight")
         "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (efs/org-font-setup))

#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Configure Babel Languages

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
        (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

** Structure Templates

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

** Auto-tangle Configuration Files

When this org file is changed and saved it will update and generate a new init.el file

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

* Development

** Languages
*** IDE Features with lsp-mode
**** lsp-mode

Lsp-mode, kind of heavy, but is the only protocol worth using

#+begin_src emacs-lisp

  (use-package lsp-mode
    :straight t
    :commands lsp
    :hook (lsp)
    :init (setq lsp-inhibit-message t
                lsp-eldoc-render-all nil
                lsp-highlight-symbol-at-point nil)
    :config
    (setq lsp-enable-snippet t)
    (setq lsp-headerline-breadcrumb-segments nil)
    (setq lsp-headerline-breadcrumb-enable nil)
    (lsp-enable-which-key-integration t))


#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :straight t
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-ignore-duplicate t)
    (add-hook 'lsp-mode-hook 'lsp-ui-mode)
      (setq lsp-ui-doc-enable nil)
      (setq lsp-eldoc-enable-hover nil)
      (setq lsp-modeline-diagnostics-enable nil)
      (setq lsp-ui-doc-show-with-cursor nil)
      (setq lsp-signature-auto-activate nil)
      (setq lsp-ui-doc-show-with-mouse nil)
      (setq lsp-headerline-breadcrumb-enable nil)
      (setq lsp-ui-sideline-show-code-actions nil)
      (setq lsp-completion-show-detail nil))


#+end_src

**** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

   (use-package lsp-ivy
     :after lsp)

#+end_src

*** TypeScript

#+begin_src emacs-lisp

      (use-package typescript-mode
        :straight t
        :mode
        ("\\.ts\\'"
         "\\.vue\\'")
        :hook (typescript-mode . lsp-deferred)
        :config
        (setq typescript-indent-level 2))

#+end_src

*Important note!*  For =lsp-mode= to work with TypeScript (and JavaScript) you will need to install a language server on your machine.  If you have Node.js installed, the easiest way to do that is by running the following command:

#+begin_src shell :tangle no

npm install -g typescript-language-server typescript

#+end_src

This will install the [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] and the TypeScript compiler package.

*** Python

Check the python server is installed, install if not

#+begin_src sh :tangle no

pip install --user "python-language-server[all]"

#+end_src

There are a number of other language servers for Python so if you find that =pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!

#+begin_src emacs-lisp

  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred))

#+end_src

You can use the pyvenv package to use =virtualenv= environments in Emacs.  The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

#+begin_src emacs-lisp

  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))

#+end_src

*** Php
#+begin_src emacs-lisp

  (use-package php-mode
    :straight t
    :mode "\\.php\\'"
    :hook (php-mode . lsp-deferred))

  (defun lsp-php-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))

  (add-hook 'php-mode-hook #'lsp-php-install-save-hooks)

#+end_src

*** Vue

For any vue related files

#+begin_src emacs-lisp

  ;; (use-package vue-mode
  ;;   :straight t
  ;;   :mode "\\.vue\\'"
  ;;   :hook
  ;;   (vue-mode . lsp-deferred)
  ;;   :config
  ;;   (setq lsp-javascript-format-enable t)
  ;;   (setq lsp-javascript-suggest-complete-js-docs nil)
  ;;   (setq mmm-submode-decoration-level 0)
  ;;   (setq mmm-js-mode-enter-hook (lambda () (setq syntax-ppss-table nil)))
  ;;   (setq mmm-typescript-mode-enter-hook (lambda () (setq syntax-ppss-table nil)))
  ;;   (jit-lock-mode nil)
  ;;   (global-set-key (kbd "C-c C-l") 'vue-mode-reparse))

#+end_src

** Company Mode

Basically where everything popup related will appear

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    :config
    (progn
      (setq company-idle-delay 0.0
            company-minimum-prefix-length 1)     
      (define-key company-active-map [tab] nil)
      (define-key company-active-map (kbd "TAB") nil)
      (advice-add 'company-tng--supress-post-completion :override #'ignore)
      (global-company-mode 1))

    (defvar company-mode/enable-yas t
    "Enable yasnippet for all backends.")

    (defun company-mode/backend-with-yas (backend)
    (if
        (or (not company-mode/enable-yas)
            (and (listp backend) (member 'company-yasnippet backend))
            )
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends)))

    (use-package company-box
      :hook (company-mode . company-box-mode))

#+end_src

** Projectile

Project management plugin, dont really use it that much

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Documents/Projects")
      (setq projectile-project-search-path '("~/Documents/Projects")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit

Best thing that emacs has to offer

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

#+end_src

** Commenting

Comments stuff

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("C-;" . evilnc-comment-or-uncomment-lines))

#+end_src

** Rainbow Delimiters

Added colour to brackets / delimiters etc

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (show-paren-mode 1)

  ;; Colors for # colors
  (use-package rainbow-mode
    :defer t
    :hook (org-mode
           emacs-lisp-mode
           typescript-mode))

  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(rainbow-delimiters-depth-1-face ((t (:foreground "#fef691"))))
   '(rainbow-delimiters-depth-2-face ((t (:foreground "#8f87de"))))
   '(rainbow-delimiters-depth-3-face ((t (:foreground "#6574cd"))))
   '(rainbow-delimiters-depth-4-face ((t (:foreground "#fa7b62"))))
   '(rainbow-delimiters-depth-5-face ((t (:foreground "#f66d9b"))))
   '(rainbow-delimiters-depth-6-face ((t (:foreground "#38c172"))))
   '(rainbow-delimiters-depth-7-face ((t (:foreground "#fdae42"))))
   '(rainbow-delimiters-depth-8-face ((t (:foreground "#e3342f")))))
#+end_src

** General Development
*** Popup Kill Ring

Viewable ring for all text recently killed

#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+end_src

*** Yasnippet

Snippets for coding etc

#+begin_src emacs-lisp

  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-reload-all))

#+end_src

*** General Editing Config

#+begin_src emacs-lisp

  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)

#+end_src

*** Flycheck

Syntax checking

#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :hook(lsp-mode . flycheck-mode))
#+end_src

*** Smart Parens

Smart ending for parens

#+begin_src emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode))
#+end_src

*** Hightlight Matching Braces

#+begin_src emacs-lisp

  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))

#+end_src

*** Clean Whitespace

#+begin_src emacs-lisp

   (use-package ws-butler
     :hook ((text-mode . ws-butler-mode)
            (prog-mode . ws-butler-mode)))

#+end_src

* Terminals
** vterm

Terminal emulator that can be run inside emacs

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

#+end_src

** Eshell

Shell written in elisp

#+begin_src emacs-lisp

  (defun efs/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :after eshell)

  (use-package eshell
    :hook (eshell-first-time-mode . efs/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))


#+end_src

* File Management
** Dired

File browser for emacs

*** Key Bindings
**** Navigation

*Emacs*
- =n= - next line
- =p= - previous line
- =j= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g= - Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    )

  (use-package dired-rainbow
      :defer 2
      :config
      (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
      (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
      (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
      (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
      (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
      (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
      (dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
      (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
      (dired-rainbow-define log "#c17d11" ("log"))
      (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
      (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
      (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
      (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
      (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
      (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
      (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
      (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
      (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
      (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
      (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode))

#+end_src

* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src

* Rebinds And Custom Commands

#+begin_src emacs-lisp

  (defun copy-word ()
    (interactive)
    (save-excursion
      (forward-char 1)
      (backward-word)
      (kill-word 1)
      (yank)))

  (defun smart-beginning-of-line ()
    (interactive)
    (let ((oldpos (point)))
      (back-to-indentation)
      (and (= oldpos (point))
           (beginning-of-line))))

  (defun shift-text (distance)
    (if (use-region-p)
        (let ((mark (mark)))
          (save-excursion
            (indent-rigidly (region-beginning)
                            (region-end)
                            distance)
            (push-mark mark t t)
            (setq deactivate-mark nil)))
      (indent-rigidly (line-beginning-position)
                      (line-end-position)
                      distance)))

  (defun shift-right (count)
    (interactive "p")
    (shift-text count))

  (defun shift-left (count)
    (interactive "p")
    (shift-text (- count)))

  (defun aborn/backward-kill-word ()
    "Customize/Smart backward-kill-word."
    (interactive)
    (let* ((cp (point))
           (backword)
           (end)
           (space-pos)
           (backword-char (if (bobp)
                              ""           ;; cursor in begin of buffer
                            (buffer-substring cp (- cp 1)))))
      (if (equal (length backword-char) (string-width backword-char))
          (progn
            (save-excursion
              (setq backword (buffer-substring (point) (progn (forward-word -1) (point)))))
            (setq ab/debug backword)
            (save-excursion
              (when (and backword          ;; when backword contains space
                         (s-contains? " " backword))
                (setq space-pos (ignore-errors (search-backward " ")))))
            (save-excursion
              (let* ((pos (ignore-errors (search-backward-regexp "\n")))
                     (substr (when pos (buffer-substring pos cp))))
                (when (or (and substr (s-blank? (s-trim substr)))
                          (s-contains? "\n" backword))
                  (setq end pos))))
            (if end
                (kill-region cp end)
              (if space-pos
                  (kill-region cp space-pos)
                (backward-kill-word 1))))
        (kill-region cp (- cp 1)))         ;; word is non-english word
      ))

  (defun custom-avy-copy-line ()
    (interactive)
    (save-excursion
      (avy-goto-line)
      (back-to-indentation)
      (kill-line)
      (yank)))

  (global-set-key (kbd "C-c w") #'copy-word)
  (global-set-key (kbd "C-c l") #'custom-avy-copy-line)
  (global-set-key (kbd "C-x C-b") #'switch-to-buffer)
  (global-set-key (kbd "C-a") #'smart-beginning-of-line)
  (global-set-key (kbd "M-[") #'shift-right)
  (global-set-key (kbd "M-]") #'shift-left)
  (global-set-key [C-backspace] #'aborn/backward-kill-word)

#+end_src
